while(sqrt(norm)>stop){
	a; // DPhi = G
	b; // Dlambda = 0
	dGdx0 = (G(x,x0+dx0,y,y0)-G(x,x0,y,y0))/dx0; // dG/dx0
	dGdy0 = (G(x,x0,y,y0+dy0)-G(x,x0,y,y0))/dy0; // dG/dy0
	dIdx0 = -int2d(Th)(lambda*dGdx0); // dI/dx0
	dIdy0 = -int2d(Th)(lambda*dGdy0); // dI/dy0
	if(i==0) refnorm = norm;
	xn = xn-alpha(norm,refnorm)*dIdx0;
	yn = yn-alpha(norm,refnorm)*dIdy0;
	i++;
}			

func real alpha(real H, real R){
	if(H/R>eps) return .1/sqrt(H);
	else return 1.;
}
